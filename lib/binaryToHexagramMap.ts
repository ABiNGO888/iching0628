// 二进制字符串到卦象编号的完整映射表
// 基于传统的六十四卦序列
export const binaryToHexagramNumber: { [key: string]: number } = {
  '111111': 1,   // 乾为天
  '000000': 2,   // 坤为地
  '100010': 3,   // 水雷屯
  '010001': 4,   // 山水蒙
  '111010': 5,   // 水天需
  '010111': 6,   // 天水讼
  '010000': 7,   // 地水师
  '000010': 8,   // 水地比
  '111011': 9,   // 风天小畜
  '110111': 10,  // 天泽履
  '111000': 11,  // 地天泰
  '000111': 12,  // 天地否
  '101111': 13,  // 天火同人
  '111101': 14,  // 火天大有
  '001000': 15,  // 地山谦
  '000100': 16,  // 雷地豫
  '100110': 17,  // 泽雷随
  '011001': 18,  // 山风蛊
  '110000': 19,  // 地泽临
  '000011': 20,  // 风地观
  '100101': 21,  // 火雷噬嗑
  '101001': 22,  // 山火贲
  '000001': 23,  // 山地剥
  '100000': 24,  // 地雷复
  '100111': 25,  // 天雷无妄
  '111001': 26,  // 山天大畜
  '100001': 27,  // 山雷颐
  '011110': 28,  // 泽风大过
  '010010': 29,  // 坎为水
  '101101': 30,  // 离为火
  '001110': 31,  // 泽山咸
  '011100': 32,  // 雷风恒
  '001111': 33,  // 天山遁
  '111100': 34,  // 雷天大壮
  '000101': 35,  // 火地晋
  '101000': 36,  // 地火明夷
  '101011': 37,  // 风火家人
  '110101': 38,  // 火泽睽
  '001010': 39,  // 水山蹇
  '010100': 40,  // 雷水解
  '110001': 41,  // 山泽损
  '100011': 42,  // 风雷益
  '111110': 43,  // 泽天夬
  '011111': 44,  // 天风姤
  '000110': 45,  // 泽地萃
  '011000': 46,  // 地风升
  '010110': 47,  // 泽水困
  '011010': 48,  // 水风井
  '101110': 49,  // 泽火革
  '011101': 50,  // 火风鼎
  '100100': 51,  // 震为雷
  '001001': 52,  // 艮为山
  '001011': 53,  // 风山渐
  '110100': 54,  // 雷泽归妹
  '101100': 55,  // 雷火丰
  '001101': 56,  // 火山旅
  '011011': 57,  // 巽为风
  '110110': 58,  // 兑为泽
  '010011': 59,  // 风水涣
  '110010': 60,  // 水泽节
  '110011': 61,  // 风泽中孚
  '001100': 62,  // 雷山小过
  '101010': 63,  // 水火既济
  '010101': 64   // 火水未济
}

// 反向映射：卦象编号到二进制字符串
export const hexagramNumberToBinary: { [key: number]: string } = {}
for (const [binary, number] of Object.entries(binaryToHexagramNumber)) {
  hexagramNumberToBinary[number] = binary
}

// 根据二进制字符串获取卦象编号
export function getHexagramNumberByBinary(binary: string): number {
  return binaryToHexagramNumber[binary] || 1
}

// 根据卦象编号获取二进制字符串
export function getBinaryByHexagramNumber(number: number): string {
  return hexagramNumberToBinary[number] || '111111'
}